rm.dupl = function(x) {
k = sprintf("%d %d %d %d %d", x$SampleID0, x$Chr0, x$SampleID1, x$Chr1, x$Shared)
if (any(duplicated(k))) {
w = which(!duplicated(k))
x = x[w,]
}
x
}
# Allele age estimation from filtered pairs
rm.dupl = function(x) {
k = sprintf("%d %d %d %d %d", x$SampleID0, x$Chr0, x$SampleID1, x$Chr1, x$Shared)
if (any(duplicated(k))) {
w = which(!duplicated(k))
x = x[w,]
}
x
}
qc.tmrca = function(x, ne) {
est = (x$Shape / x$Rate) * ne
est = round(est/10)* 10
con = which(x$Shared == 1)
dis = which(x$Shared == 0)
if (length(con) < 1) return(NULL)
if (length(dis) < 1) return(NULL)
if (max(est[con]) > min(est[dis])) {
rng = sort(unique(est))
rng = rng[-length(rng)] + (diff(rng) / 2)
num = sapply(rng, function(y, c, d) { length(which(c > y)) + length(which(d < y)) }, est[con], est[dis])
lim = rng[which.min(num)]
wc = which(est[con] < lim)
wd = which(est[dis] > lim)
if (length(wc) == 0) { wc = which.min(est[con]) }
if (length(wd) == 0) { wd = which.max(est[dis]) }
con = con[wc]
dis = dis[wd]
}
c(con, dis)
}
parse.data = function(d, ne) {
d = lapply(d, function(x) {
x = rm.dupl(x)
x$Pass = 0
i = qc.tmrca(x, ne)
if (is.null(i)) {
return(NULL)
}
x$Pass[i] = 1
x
})
d
}
com.post = function(xc, xd, t) {
cp = rep(0, length(t))
for (i in 1:length(t)) {
cc = sum(pgamma(t[i], shape = xc$Shape, rate = xc$Rate, log.p = T, lower.tail = T) )
cd = sum(pgamma(t[i], shape = xd$Shape, rate = xd$Rate, log.p = T, lower.tail = F) )
cp[i] = cc + cd
}
cp
}
com.post.est = function(xc, xd, lower = (0.01/ne), upper = (1e8/ne), last = 0, n = 101, lim = 1/ne) {
if (upper - lower < lim) {
return(last)
}
t = exp(seq(log(lower), log(upper), length.out = n))
cp = com.post(xc, xd, t)
wx = which.max(cp)
lo = max(1, wx-2)
up = min(n, wx+2)
return(com.post.est(xc, xd, t[lo], t[up], t[wx]))
}
run.age.est = function(d, ne) {
cp = lapply(d, function(x, ne) {
con = which(x$Shared == 1 & x$Pass == 1)
dis = which(x$Shared == 0 & x$Pass == 1)
if (length(con) < 1) return(NULL)
if (length(dis) < 1) return(NULL)
xc = data.frame(Shape = x$Shape[con], Rate = x$Rate[con])
xd = data.frame(Shape = x$Shape[dis], Rate = x$Rate[dis])
data.frame(MarkerID = x$MarkerID[1],
Clock = x$Clock[1],
N_Concordant = length(con),
N_Discordant = length(dis),
PostMode  = com.post.est(xc, xd) * ne)
}, ne)
cp
}
args = commandArgs(T)
if (length(args) == 0) {
cat("Input arguments not specified\n")
quit(save = "no")
}
library(dplyr)
library(repr)
library(ggplot2)
library(tidyr)
library(minpack.lm)
options(repr.plot.width=4, repr.plot.height= 4) # Change plot sizes (in cm) - THIS BIT OF CODE IS ONLY RELEVANT IF YOU ARE USING A JUPYTER NOTEBOOK -- IGNORE OTHERWISE
require("minpack.lm")
setwd("/Users/zhangxiaoya/CMEECoursework//MiniProject/code")
options(warn=-1)
# Open the modified data list.
data <- read.csv("../Data/LIST.csv", header = TRUE)
data <- data.frame(data)
graphics.off()
# Specify model functions.
logistic_model <- function(N_0, N_max, r_max, t){ # The classic logistic equation
return((N_0 * N_max * exp(r_max*t)) / (N_max + N_0 * (exp(r_max*t) - 1)))
}
logisticlag_model <- function(N_0, N_max, r_max, t, t_lag){# N_0:initial population size, r: maximum growth rate, K: carrying capacity
return(N_0 + (N_max - N_0) / (1 + exp(4 * r_max * (t_lag - t) / (N_max - N_0) + 2)))
}
gompertz_model <- function(N_0, N_max, r_max, t, t_lag){ # Modified gompertz growth model
return(N_0 + (N_max - N_0) * exp(-exp(r_max * exp(1) * (t_lag - t)/((N_max - N_0) * log(10)) + 1)))
}
baranyi_model <- function(N_0, N_max, r_max, t, t_lag){ # Baranyi model
return(N_max + log10((-1+exp(r_max*t_lag) + exp(r_max*t))/(exp(r_max*t) - 1 + exp(r_max*t_lag) * 10^(N_max-N_0))))
}
buchanan_model <- function(t, r_max, N_max, N_0, t_lag){ # Buchanan model
return(N_0 + (t >= t_lag) * (t <= (t_lag + (N_max - N_0) * log(10)/r_max)) * r_max * (t - t_lag)/log(10) + (t >= t_lag) * (t > (t_lag + (N_max - N_0) * log(10)/r_max)) * (N_max - N_0))
}
fit_logistic <- try(nlsLM(Log10N ~ logistic_model(N_0, N_max, r_max, t = Time), data = data_fit, start = c(N_0 = N_0_start, N_max = N_max_start, r_max = r_max_start), control = nls.lm.control(maxiter = 100)), silent = T) #Running the logistic model with prior estimated starting values, but using try to keep going when it fails to optimise
if (class(fit_logistic) != 'try-error'){
df_logistic$Model <- "Logistic"
names(df_logistic) <- c("Time", "PopBio", "model")
} else {
print("error!")
df_logistic$Model <- "Logistic"
names(df_logistic) <- c("Time", "PopBio", "model")
}
fit_gompertz <- try(nlsLM(Log10N ~ gompertz_model(N_0, N_max, r_max, t = Time, t_lag), data = data_fit, start = c(N_0 = N_0_start, N_max = N_max_start, r_max = r_max_start, t_lag = t_lag_start), control = nls.lm.control(maxiter = 100)), silent = T) #Running the Gompertz model with prior estimated starting values, but using try to keep going when it fails to optimise
if (class(fit_gompertz) != 'try-error'){
df_gompertz$Model <- "Gompertz"
names(df_gompertz) <- c("Time", "PopBio", "model")
} else {
print("error!")
df_gompertz$Model <- "Gompertz"
names(df_gompertz) <- c("Time", "PopBio", "model")
}
fit_baranyi <- try(nlsLM(Log10N ~ baranyi_model(N_0, N_max, r_max, t = Time, t_lag), data = data_fit, start = c(N_0 = N_0_start, N_max = N_max_start, r_max = r_max_start, t_lag = t_lag_start), control = nls.lm.control(maxiter = 100)), silent = T) #Running the Baranyi model with prior estimated starting values, but using try to keep going when it fails to optimise
if (class(fit_baranyi) != 'try-error'){
df_baranyi$Model <- "Baranyi"
names(df_baranyi) <- c("Time", "PopBio", "model")
} else {
print("error!")
df_baranyi$Model <- "Baranyi"
names(df_baranyi) <- c("Time", "PopBio", "model")
}
fit_buchanan <- try(nlsLM(Log10N ~ buchanan_model(N_0, N_max, r_max, t = Time, t_lag), data = data_fit, start = c(N_0 = N_0_start, N_max = N_max_start, r_max = r_max_start, t_lag = t_lag_start), control = nls.lm.control(maxiter = 100)), silent = T) #Running the Baranyi model with prior estimated starting values, but using try to keep going when it fails to optimise
if (class(fit_buchanan) != 'try-error'){
df_buchanan$Model <- "Buchanan"
names(df_buchanan) <- c("Time", "PopBio", "model")
} else {
print("error!")
df_buchanan$Model <- "Buchanan"
names(df_buchanan) <- c("Time", "PopBio", "model")
}
# Allele age estimation from filtered pairs
rm.dupl = function(x) {
k = sprintf("%d %d %d %d %d", x$SampleID0, x$Chr0, x$SampleID1, x$Chr1, x$Shared)
if (any(duplicated(k))) {
w = which(!duplicated(k))
x = x[w,]
}
x
}
qc.tmrca = function(x, ne) {
est = (x$Shape / x$Rate) * ne
est = round(est/10)* 10
con = which(x$Shared == 1)
dis = which(x$Shared == 0)
if (length(con) < 1) return(NULL)
if (length(dis) < 1) return(NULL)
if (max(est[con]) > min(est[dis])) {
rng = sort(unique(est))
rng = rng[-length(rng)] + (diff(rng) / 2)
num = sapply(rng, function(y, c, d) { length(which(c > y)) + length(which(d < y)) }, est[con], est[dis])
lim = rng[which.min(num)]
wc = which(est[con] < lim)
wd = which(est[dis] > lim)
if (length(wc) == 0) { wc = which.min(est[con]) }
if (length(wd) == 0) { wd = which.max(est[dis]) }
con = con[wc]
dis = dis[wd]
}
c(con, dis)
}
parse.data = function(d, ne) {
d = lapply(d, function(x) {
x = rm.dupl(x)
x$Pass = 0
i = qc.tmrca(x, ne)
if (is.null(i)) {
return(NULL)
}
x$Pass[i] = 1
x
})
d
}
com.post = function(xc, xd, t) {
cp = rep(0, length(t))
for (i in 1:length(t)) {
cc = sum(pgamma(t[i], shape = xc$Shape, rate = xc$Rate, log.p = T, lower.tail = T) )
cd = sum(pgamma(t[i], shape = xd$Shape, rate = xd$Rate, log.p = T, lower.tail = F) )
cp[i] = cc + cd
}
cp
}
com.post.est = function(xc, xd, lower = (0.01/ne), upper = (1e8/ne), last = 0, n = 101, lim = 1/ne) {
if (upper - lower < lim) {
return(last)
}
t = exp(seq(log(lower), log(upper), length.out = n))
cp = com.post(xc, xd, t)
wx = which.max(cp)
lo = max(1, wx-2)
up = min(n, wx+2)
return(com.post.est(xc, xd, t[lo], t[up], t[wx]))
}
run.age.est = function(d, ne) {
cp = lapply(d, function(x, ne) {
con = which(x$Shared == 1 & x$Pass == 1)
dis = which(x$Shared == 0 & x$Pass == 1)
if (length(con) < 1) return(NULL)
if (length(dis) < 1) return(NULL)
xc = data.frame(Shape = x$Shape[con], Rate = x$Rate[con])
xd = data.frame(Shape = x$Shape[dis], Rate = x$Rate[dis])
data.frame(MarkerID = x$MarkerID[1],
Clock = x$Clock[1],
N_Concordant = length(con),
N_Discordant = length(dis),
PostMode  = com.post.est(xc, xd) * ne)
}, ne)
cp
}
args = commandArgs(T)
if (length(args) == 0) {
cat("Input arguments not specified\n")
quit(save = "no")
}
