Starting weekly assessment for Xiaoya, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 89.24 KiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week1, Assessment, HPC Coursework, WEEK7, .git, WEEK2, WEEK3

Found the following files in parent directory: README.txt, .gitignore, .DS_Store

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp
**********************************************************************

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
My CMEE Coursework Repository
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 4 weekly directories: WEEK2, WEEK3, WEEK7, Week1

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: Code, sandbox, data, Results

Found the following files: README.txt, dictionary.py, .DS_Store

Checking for readme file in weekly directory...

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
lc1: 
It writes three separate list comprehensions that create three different
lists containing the latin names, comon names and mean body masses for
each species in birds, respectively. 
And it finishes the same using conventional loops.

lc2:
It uses a list comprehension to create a list of month,rainfall tuples where
the amount of rain was greater than 100 mm.
It uses a list comprehension to create a list of just month names where the
amount of rain was less than 50 mm. 
And they are finished using conventional loops.

dictionary.py:
It writes a short python script to populate a dictionary called taxa_dic 
derived from  taxa so that it maps order names to sets of taxa.

tuple.py:
It writes a script to print these on a separate line or output block by species.

cfexercises1.py:
It modifys cfexercises1.py to make it a "module" like control_flow.py. 
And all the foo_x functions take arguments from the user.

cfexercises2.py:
It outputs evaluations of all the foo_x modules

boilerplate.py and control_flow.py:

They are run from the bash terminal.
**********************************************************************

Found following files in results directory: ...

Found 19 code files: lc2.py, boilerplate.py, cfexercises2.py, dictionary.py, Untitled-1.py, debugme.py, scope.py, basic_io3.py, cfexercises1.py, basic_io.py, lc1.py, oaks_debugme.py, oaks.py, loops.py, basic_io2.py, control_flow.py, tuple copy.py, test_control_flow.py, cfexercises2 copy 2.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file lc2.py...

File contents are:
**********************************************************************
# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.
 
# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 

# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !). 

month = []
rainAmount = []

for i in range(len(rainfall)):
    if rainfall[i][1]>100:
        month.append(rainfall[i][0])

print(month)
**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 98

Output (only first 500 characters): 

**********************************************************************
['JAN', 'FEB', 'AUG', 'NOV', 'DEC']

**********************************************************************

Code ran without errors

Time consumed = 0.02557s

======================================================================
Inspecting script file boilerplate.py...

File contents are:
**********************************************************************
"""Description of this program or application.
    You can use several lines"""

__appname__ = '[application name here]'
__author__ = 'Your Name (your@email.address)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

## imports ##
import sys # module to interface our program with the operating system

## constants ##


## functions ##
def main(argv):
    """ Main entry point of the program """
    print('This is a boilerplate') # NOTE: indented using two tabs or 4 spaces
    return 0

if __name__ == "__main__": 
    """Makes sure the "main" function is called from command line"""  
    status = main(sys.argv)
    sys.exit(status)**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 98

Output (only first 500 characters): 

**********************************************************************
This is a boilerplate

**********************************************************************

Code ran without errors

Time consumed = 0.02470s

======================================================================
Inspecting script file cfexercises2.py...

File contents are:
**********************************************************************
for j in range(12):
    if j % 3 == 0:
        print('hello')

for j in range(15):
     if j % 5 == 3:
        print('hello')
     elif j % 4 == 3:
        print('hello')

z = 0
while z != 15:
    print('hello')
    z = z + 3

z = 12
while z < 100:
    if z == 31:
        for k in range(7):
            print('hello')
    elif z == 18:
        print('hello')
    z = z + 1**********************************************************************

Testing cfexercises2.py...

cfexercises2.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 96

Output (only first 500 characters): 

**********************************************************************
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello

**********************************************************************

Code ran without errors

Time consumed = 0.02682s

======================================================================
Inspecting script file dictionary.py...

File contents are:
**********************************************************************
taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

# Write a short python script to populate a dictionary called taxa_dic 
# derived from  taxa so that it maps order names to sets of taxa. 
# E.g. 'Chiroptera' : set(['Myotis lucifugus']) etc. 

taxa_dic = {}
for i in range(len(taxa)):
        taxa_dic.setdefault(taxa[i][1],[]).append(taxa[i][0])
print (taxa_dic)


**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 94

Output (only first 500 characters): 

**********************************************************************
{'Carnivora': ['Lyacon pictus', 'Arctocephalus gazella', 'Canis lupus'], 'Chiroptera': ['Myotis lucifugus'], 'Rodentia': ['Gerbillus henleyi', 'Peromyscus crinitus', 'Mus domesticus', 'Cleithrionomys rutilus'], 'Afrosoricida': ['Microgale dobsoni', 'Microgale talazaci']}

**********************************************************************

Code ran without errors

Time consumed = 0.02896s

======================================================================
Inspecting script file Untitled-1.py...

File contents are:
**********************************************************************
import scipy as sc
import scipy.stats
import scipy.integrate as integrate
import matplotlib.pylab as p


# a = sc.array(range(5)) # a one-dimensional array
# a = sc.array(range(5), float)
# a.dtype 
# # print(a.dtype)
# x = sc.arange(5)
# m = sc.arange(5.) #directly specify float using decimal
# # print(m)
# # print(x.shape)

# b = sc.array([i for i in range(10) if i % 2 ==1])
# # print(b)
# # # v = sc.array(range(6),float)
# # # v = sc.arange(8.)
# # # print(v)
# # # c = b.tolist()
# # # print(c)
# # print(b.shape)

# mat = sc.array([[1,2,6],[3,4,0]])

# mit = sc.array([[[1], [6]],[[2],[6]]])
# print(mit.shape)
# # print(mat)
# print(mat.shape)

# iu = sc.array([[1,3]])

# print(iu.shape)

# m = sc.array([1, 3, 5, 7, 9])
# n = m.tolist()
# print(m)
# print(m.shape)
# print(n)

# a = [1,2,3,4]
# b = sc.array(a)

# print(b)

mat = sc.array([[0, 1], [2, 3]])
# print(mat)
# print(mat[:,1])
# print(mat[0,0])
# print(mat[1,0])
# print(mat[:,0])
# print(mat[0,-1])
# mat[0,0] = -1 
# # mat[:,0] = [12,12]
# newRow = [[12,12]]
# mat = sc.append(mat, newRow, axis = 0)
# # print(mat)

# # mat = sc.array([[0, 1], [2, 3]])
# # mat0 = sc.array([[0, 10], [-1, 3]])
# # matt = sc.concatenate((mat, mat0), axis = 0)
# # print(matt)
# # mat = mat.ravel()
# # print(mat)
# # mat = mat.reshape((4,1))
# # print(mat)
# # print(sc.ones((4,2))) #(4,2) are the (row,col) array dimensions

# # print(sc.zeros((3,1)))

# mm = sc.arange(16)
# mm = mm.reshape(4,4) 
# nn = mm.transpose()
# # print(mm)
# # print(nn)

# # print(mm//(mm+1).transpose())

# # a = scipy.stats.norm.rvs(size = 10)

# # b = scipy.stats.randint.rvs(0, 10, size =7) 
# # print(b)

def dCR_dt(pops, t=0):

     R = pops[0]
     C = pops[1]
     dRdt = r * R - a * R * C 
     dCdt = -z * C + e * a * R * C
    
     return sc.array([dRdt, dCdt])

r = 1.
a = 0.1 
z = 1.5
e = 0.75
t = sc.linspace(0, 15, 1000)

R0 = 10
C0 = 5 
RC0 = sc.array([R0, C0])
pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)
type(infodict)
infodict.keys()
infodict['message']





f1 = p.figure()

p.plot(pops[:,0], pops[:,1], 'r-', label='Resource density') # Plot

p.grid()
p.legend(loc='best')
p.xlabel('Resource density')
p.ylabel('Resource density')
p.title('Consumer density')
p.show()# To display the figure
**********************************************************************

Testing Untitled-1.py...

Untitled-1.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 91.5

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 10.00638s

======================================================================
Inspecting script file debugme.py...

File contents are:
**********************************************************************
def createabug(x):
    y = x**4
    z = 0.
    y = y/z
    return y

createabug(25)**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 89.0

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "debugme.py", line 7, in <module>
    createabug(25)
  File "debugme.py", line 4, in createabug
    y = y/z
ZeroDivisionError: float division by zero

======================================================================
Inspecting script file scope.py...

File contents are:
**********************************************************************
_a_global = 10

def a_function():
    global _a_global
    _a_global = 5
    _a_local = 4
    print("Inside the function, the value is ", _a_global)
    print("Inside the function, the value is ", _a_local)
    return None

a_function()
print("Outside the function, the value is", _a_global)**********************************************************************

Testing scope.py...

scope.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 86.5

Output (only first 500 characters): 

**********************************************************************
Inside the function, the value is  5
Inside the function, the value is  4
Outside the function, the value is 5

**********************************************************************

Code ran without errors

Time consumed = 0.03707s

======================================================================
Inspecting script file basic_io3.py...

File contents are:
**********************************************************************
#############################
# STORING OBJECTS
#############################
# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another key": 11}

import pickle

f = open('../sandbox/testp.p','wb') ## note the b: accept binary files
pickle.dump(my_dictionary, f)
f.close()

## Load the data again
f = open('../sandbox/testp.p','rb')
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)
**********************************************************************

Testing basic_io3.py...

basic_io3.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 84.5

Output (only first 500 characters): 

**********************************************************************
{'a key': 10, 'another key': 11}

**********************************************************************

Code ran without errors

Time consumed = 0.03443s

======================================================================
Inspecting script file cfexercises1.py...

File contents are:
**********************************************************************
# What does each of foo_x do? 
def foo_1(x):
    return x ** 0.5

def foo_2(x, y):
    if x > y:
        return x
    return y

def foo_3(x, y, z):
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return [x, y, z]

def foo_4(x):
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result

def foo_5(x): # a recursive function that calculates the factorial of x
    if x == 1:
        return 1
    return x * foo_5(x - 1)

def foo_6(x): # Calculate the factorial of x in a different way
    facto = 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return facto**********************************************************************

Testing cfexercises1.py...

cfexercises1.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 79.5

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.02967s

======================================================================
Inspecting script file basic_io.py...

File contents are:
**********************************************************************
#############################
# FILE INPUT
#############################
# Open a file for reading
f = open('../sandbox/test.txt', 'r')
# use "implicit" for loop:
# if the object is a file, python will cycle over lines
for line in f:
    print(line)
    


    



# close the file
f.close()

# Same example, skip blank lines
f = open('../sandbox/test.txt', 'r')
for line in f:
    if len(line.strip()) > 0:
        print(line)

f.close()

#############################
# FILE OUTPUT
#############################
# Save the elements of a list to a file
list_to_save = range(100)

f = open('../sandbox/testout.txt','w')
for i in list_to_save:
    f.write(str(i) + '\n') ## Add a new line at the end

f.close()

#############################
# STORING OBJECTS
#############################
# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another key": 11}

import pickle

f = open('../sandbox/testp.p','wb') ## note the b: accept binary files
pickle.dump(my_dictionary, f)
f.close()

## Load the data again
f = open('../sandbox/testp.p','rb')
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)
**********************************************************************

Testing basic_io.py...

basic_io.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 77.5

Output (only first 500 characters): 

**********************************************************************
First Line

Second Line



Third Line



Fourth Line
First Line

Second Line

Third Line

Fourth Line
{'another key': 11, 'a key': 10}

**********************************************************************

Code ran without errors

Time consumed = 0.03751s

======================================================================
Inspecting script file lc1.py...

File contents are:
**********************************************************************
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 

# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !). 

latinName = []
commonName = []
bodyMass = []



for i in range(len(birds)):
    latinName.append(birds[i][0])
    commonName.append(birds[i][1])
    bodyMass.append(birds[i][2])
   
print(latinName)
print(commonName)
print(bodyMass)**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 75.5

Output (only first 500 characters): 

**********************************************************************
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]

**********************************************************************

Code ran without errors

Time consumed = 0.02660s

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:
**********************************************************************
import csv
import sys
import doctest 


def is_an_oak(name):

    """Find whether is_an_oak function works as expected.

    >>> is_an_oak('Fagus sylvatica')
    print('FOUND AN OAK!')
    """

    return name.lower().startswith('quercus')

# def main(argv): 
    # f = open('../data/TestOaksData.csv','r')
    # g = open('../data/JustOaksData.csv','w')
    # taxa = csv.reader(f)
    # csvwrite = csv.writer(g)
    # oaks = set()
    # for row in taxa:
    #     print(row)
    #     print ("The genus is: ") 
    #     print(row[0] + '\n')
    #     if is_an_oak(row[0]):
    #         print('FOUND AN OAK!\n')
    #         csvwrite.writerow([row[0], row[1]])    

    # return 0
doctest.testmod()
# if (__name__ == "__main__"):
#     status = main(sys.argv)**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 74.5

Output (only first 500 characters): 

**********************************************************************
**********************************************************************
File "oaks_debugme.py", line 10, in __main__.is_an_oak
Failed example:
    is_an_oak('Fagus sylvatica')
Expected:
    print('FOUND AN OAK!')
Got:
    False
**********************************************************************
1 items had failures:
   1 of   1 in __main__.is_an_oak
***Test Failed*** 1 failures.

**********************************************************************

Code ran without errors

Time consumed = 0.06135s

======================================================================
Inspecting script file oaks.py...

File contents are:
**********************************************************************
## Finds just those taxa that are oak trees from a list of species

taxa = [ 'Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris',
         'Quercus petraea',
       ]

def is_an_oak(name):
    return name.lower().startswith('quercus ')

##Using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

##Using list comprehensions   
oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

##Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

##Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 72.0

Output (only first 500 characters): 

**********************************************************************
{'Quercus petraea', 'Quercus robur', 'Quercus cerris'}
{'Quercus petraea', 'Quercus robur', 'Quercus cerris'}
{'QUERCUS PETRAEA', 'QUERCUS ROBUR', 'QUERCUS CERRIS'}
{'QUERCUS PETRAEA', 'QUERCUS ROBUR', 'QUERCUS CERRIS'}

**********************************************************************

Code ran without errors

Time consumed = 0.02897s

======================================================================
Inspecting script file loops.py...

File contents are:
**********************************************************************
# FOR loops in Python
for i in range(5):
    print(i)

my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)

total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

# WHILE loops  in Python
z = 0
while z < 100:
    z = z + 1
    print(z)

b = True
while b:
    print("GERONIMO! infinite loop! ctrl+c to stop!")
# ctrl + c to stop!
**********************************************************************

Testing loops.py...

loops.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 70.0

Output (only first 500 characters): 

**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c
**********************************************************************

Code ran without errors

Time consumed = 10.34147s

======================================================================
Inspecting script file basic_io2.py...

File contents are:
**********************************************************************
#############################
# FILE OUTPUT
#############################
# Save the elements of a list to a file
list_to_save = range(100)

f = open('../sandbox/testout.txt','w')
for i in list_to_save:
    f.write(str(i) + '\n') ## Add a new line at the end

f.close()
**********************************************************************

Testing basic_io2.py...

basic_io2.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 68.0

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.06325s

======================================================================
Inspecting script file control_flow.py...

File contents are:
**********************************************************************
"""Some functions exemplifying the use of control statements"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.
__author__ = 'Samraat Pawar (s.pawar@imperial.ac.uk)'
__version__ = '0.0.1'

import sys

def even_or_odd(x=0): # if not specified, x should take value 0.

    """Find whether a number x is even or odd."""
    if x % 2 == 0: #The conditional if
        return "%d is Even!" % x
    return "%d is Odd!" % x

def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2,3,4,5."""
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0: #means "else, if"
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else: # When all other (if, elif) conditions are not met
        return "No divisor found for %d!" % x # Each function can return a value or a variable.
    return "The largest divisor of %d is %d" % (x, largest)

def is_prime(x=70):
    """Find whether an integer is prime."""
    for i in range(2, x): #  "range" returns a sequence of integers
        if x % i == 0:
          print("%d is not a prime: %d is a divisor" % (x, i)) 
          return False
    print("%d is a prime!" % x)
    return True 

def find_all_primes(x=22):
    """Find all the primes up to x"""
    allprimes = []
    for i in range(2, x + 1):
      if is_prime(i):
        allprimes.append(i)
    print("There are %d primes between 2 and %d" % (len(allprimes), x))
    return allprimes

def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
    **********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 67.5

Output (only first 500 characters): 

**********************************************************************
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
No divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is 
**********************************************************************

Code ran without errors

Time consumed = 0.05046s

======================================================================
Inspecting script file tuple copy.py...

File contents are:
**********************************************************************
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by species 
# Hints: use the "print" command! You can use list comprehensions!

print (birds)
**********************************************************************

Testing tuple copy.py...

tuple copy.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 65.5

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
python3: can't open file 'tuple': [Errno 2] No such file or directory

======================================================================
Inspecting script file test_control_flow.py...

File contents are:
**********************************************************************
"""Some functions exemplifying the use of control statements"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.
__author__ = 'Samraat Pawar (s.pawar@imperial.ac.uk)'
__version__ = '0.0.1'

import sys
import ipdb.set_trace

def even_or_odd(x=0): # if not specified, x should take value 0.

    """Find whether a number x is even or odd.

    >>> even_or_odd(10)
    '10 is Even!'

    >>> even_or_odd(5)
    '5 is Odd!'

    whenever a float is provided, then the closest integer is used:    
    >>> even_or_odd(3.2)
    '3 is Odd!'

    in case of negative numbers, the positive is taken:    
    >>> even_or_odd(-2)
    '-2 is Even!'

    """
    """Find whether a number x is even or odd."""
    if x % 2 == 0: #The conditional if
        return "%d is Even!" % x
    return "%d is Odd!" % x

def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2,3,4,5."""
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0: #means "else, if"
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else: # When all other (if, elif) conditions are not met
        return "No divisor found for %d!" % x # Each function can return a value or a variable.
    return "The largest divisor of %d is %d" % (x, largest)

def is_prime(x=70):
    """Find whether an integer is prime."""
    for i in range(2, x): #  "range" returns a sequence of integers
        if x % i == 0:
          print("%d is not a prime: %d is a divisor" % (x, i)) 
          return False
    print("%d is a prime!" % x)
    return True 

def find_all_primes(x=22):
    """Find all the primes up to x"""
    allprimes = []
    for i in range(2, x + 1):
      if is_prime(i):
        allprimes.append(i)
    print("There are %d primes between 2 and %d" % (len(allprimes), x))
    return allprimes

def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)**********************************************************************

Testing test_control_flow.py...

test_control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 65.5

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "test_control_flow.py", line 8, in <module>
    import ipdb.set_trace
ImportError: No module named 'ipdb.set_trace'

If you suspect this is an IPython bug, please report it at:
    https://github.com/ipython/ipython/issues
or send an email to the mailing list at ipython-dev@python.org

You can print a more detailed traceback right now with "%tb", or use "%debug"
to interactively debug it.

Extra-detailed tracebacks for bug-reporting purposes can be enabled via:
    %config Application.verbose_crash=True


======================================================================
Inspecting script file cfexercises2 copy 2.py...

File contents are:
**********************************************************************
# What does each of fooXX do? 

import sys
def foo1(x):
    """x takes the value x*0.5"""
    return x ** 0.5

def foo2(x, y):
    """find the lager number between x and y"""
    if x > y:
        return x
    return y

def foo3(x, y, z):
    """put the largest number at end"""
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return [x, y, z]

def foo4(x):
    """multiple numbers from 1 to x"""
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result

def foo5(x): # a recursive function that calculates the factorial of x
    if x == 1:
        return 1
    return x * foo5(x - 1)
     
def foo6(x): # Calculate the factorial of x in a different way
    facto = 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return facto

def main(argv):
    print(foo1(1))
    print(foo2(2,3))
    print(foo3(5,4,8))
    print(foo4(90))
    print(foo5(6))
    print(foo6(8))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)**********************************************************************

Testing cfexercises2 copy 2.py...

cfexercises2 copy 2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 63.5

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
python3: can't open file 'cfexercises2': [Errno 2] No such file or directory

======================================================================
======================================================================
Finished running scripts

Ran into 4 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 63.5

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!